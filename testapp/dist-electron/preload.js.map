{"version":3,"file":"preload.js","sources":["../../superbridge/shared/channel.ts","../../superbridge/shared/log.ts","../../superbridge/preload/init.ts","../src/electron/preload.ts"],"sourcesContent":["export function getIPCChannelName(name: string) {\n  return `SUPERBRIDGE__${name}`;\n}\n","type Log = (...args: any[]) => void;\n\ninterface Logger {\n  (...args: any[]): void;\n  debug: Log;\n  warn: Log;\n  error: Log;\n  rename: (name: string) => Logger;\n}\n\nexport function createLogger(name: string): Logger {\n  const LOG_COLOR = \"#808080\";\n  const LOG_STYLE = `color: ${LOG_COLOR};`;\n\n  const LABEL = `%cðŸŒ‰ ${name}:%c`;\n\n  const log: Logger = (...args) => {\n    console.info(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.debug = (...args) => {\n    console.debug(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.warn = (...args) => {\n    console.warn(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.error = (...args) => {\n    console.error(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.rename = (name: string) => {\n    return createLogger(name);\n  };\n\n  return log;\n}\n\nexport const log = createLogger(\"superbridge\");\n","import {\n  IpcRendererEvent,\n  contextBridge,\n  ipcRenderer,\n  webFrame,\n} from \"electron\";\n\nimport { type BridgeHandlerSchema } from \"../main/schema\";\nimport { getIPCChannelName } from \"../shared/channel\";\nimport { createLogger } from \"../shared/log\";\nimport { RawBridgeData } from \"../shared/types\";\n\nconst log = createLogger(\"superbridge/preload\");\n\n/**\n * ! deserialization CANNOT happen here!\n *\n * This is because there is no way to share memory between preload and renderer (tried hard)\n *\n */\n\nif (!process.env.SUPERBRIDGE_SCHEMA) {\n  throw new Error(\n    \"Superbridge is not initialized. Make sure to call initializeSuperbridgeMain() in your main process before creating BrowserWindow.\"\n  );\n}\n\nconst schema = JSON.parse(\n  process.env.SUPERBRIDGE_SCHEMA\n) as BridgeHandlerSchema;\n\nfunction createSuperbridgeInterface() {\n  return {\n    send: async (type: string, payload: RawBridgeData) => {\n      if (!type) throw new Error(\"Type is required\");\n\n      log.debug(`Sending \"${type}\" with payload`, payload);\n\n      return ipcRenderer.invoke(getIPCChannelName(type), payload);\n    },\n    handle: (\n      type: string,\n      handler: (payload: RawBridgeData, event: IpcRendererEvent) => void\n    ) => {\n      if (!type) throw new Error(\"Type is required\");\n\n      function handleMessage(\n        _event: Electron.IpcRendererEvent,\n        payload: RawBridgeData\n      ) {\n        log.debug(`Handling \"${type}\" with payload`, payload);\n        handler(payload, _event);\n      }\n\n      ipcRenderer.on(getIPCChannelName(type), handleMessage);\n\n      return () => {\n        ipcRenderer.off(getIPCChannelName(type), handleMessage);\n      };\n    },\n    get schema() {\n      return schema;\n    },\n    get routingId() {\n      return webFrame.routingId;\n    },\n  };\n}\n\nexport type SuperBridgeInterface = ReturnType<\n  typeof createSuperbridgeInterface\n>;\n\nexport function initializeSuperbridgePreload() {\n  contextBridge.exposeInMainWorld(\"$superbridge\", createSuperbridgeInterface());\n}\n\ndeclare global {\n  interface Window {\n    $superbridge: SuperBridgeInterface;\n  }\n}\n","import { initializeSuperbridgePreload } from \"superbridge/preload\";\n\ninitializeSuperbridgePreload();\n"],"names":["log","name","ipcRenderer","webFrame","contextBridge"],"mappings":"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"}