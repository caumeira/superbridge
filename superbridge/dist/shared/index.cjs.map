{"version":3,"file":"index.cjs","sources":["../../shared/defineMessage.ts","../../utils/Signal.ts","../../shared/superbridge.ts"],"sourcesContent":["export class BridgeMessageType<I, O> {\n  constructor(public readonly type: string) {}\n\n  input!: I;\n  output!: O;\n}\n\nexport function defineBridgeMessage<I, O = void>(\n  name: string\n): BridgeMessageType<I, O> {\n  return new BridgeMessageType<I, O>(name);\n}\n","type Listener<T> = (value: T) => void;\n\ntype Cleanup = () => void;\n\nconst NO_VALUE = Symbol(\"NO_VALUE\");\n\nexport class Signal<T> {\n  private listeners = new Map<Symbol, Listener<T>>();\n  private lastValue: T | typeof NO_VALUE = NO_VALUE;\n\n  assertLastValue(error: Error | string) {\n    if (this.lastValue === NO_VALUE) {\n      throw typeof error === \"string\" ? new Error(error) : error;\n    }\n\n    return this.lastValue;\n  }\n\n  get hasLastValue() {\n    return this.lastValue !== NO_VALUE;\n  }\n\n  get maybeLastValue() {\n    return this.lastValue === NO_VALUE ? undefined : this.lastValue;\n  }\n\n  emit(value: T) {\n    this.lastValue = value;\n\n    const listeners = [...this.listeners.values()];\n\n    for (const listener of listeners) {\n      try {\n        listener(value);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  subscribe(listener: Listener<T>) {\n    const id = Symbol();\n\n    this.listeners.set(id, listener);\n\n    return () => {\n      this.listeners.delete(id);\n    };\n  }\n\n  subscribeWithCurrentValue(listener: Listener<T>) {\n    if (this.lastValue !== NO_VALUE) {\n      listener(this.lastValue);\n    }\n\n    return this.subscribe(listener);\n  }\n\n  effect(initializer: (value: T) => Cleanup) {\n    let currentCleanup: Cleanup | undefined;\n\n    const cancelSubscription = this.subscribeWithCurrentValue((value) => {\n      if (currentCleanup) {\n        currentCleanup();\n      }\n\n      currentCleanup = initializer(value);\n    });\n\n    return () => {\n      cancelSubscription();\n\n      if (currentCleanup) {\n        currentCleanup();\n      }\n    };\n  }\n}\n","import { BridgeMessageType } from \"./defineMessage\";\nimport { Signal } from \"../utils/Signal\";\n\ntype Cancel = () => void;\n\nexport interface SuperbridgeLink {\n  send<I, O>(\n    message: BridgeMessageType<I, O>,\n    payload: I,\n    webId?: number\n  ): Promise<O>;\n\n  handle<I, O>(\n    message: BridgeMessageType<I, O>,\n    handler: (payload: I) => Promise<O>\n  ): Cancel;\n}\n\nconst currentSuperbridgeChannel = new Signal<SuperbridgeLink>();\n\nexport function initializeSuperbridge(superbridge: SuperbridgeLink) {\n  currentSuperbridgeChannel.emit(superbridge);\n}\n\nexport const bridge: SuperbridgeLink = {\n  send<I, O>(message: BridgeMessageType<I, O>, payload: I, webId?: number) {\n    const link = currentSuperbridgeChannel.assertLastValue(\n      \"Superbridge is not initialized\"\n    );\n\n    return link.send(message, payload, webId);\n  },\n  handle<I, O>(\n    message: BridgeMessageType<I, O>,\n    handler: (payload: I) => Promise<O>\n  ) {\n    if (!currentSuperbridgeChannel.hasLastValue) {\n      Promise.resolve().then(() => {\n        if (!currentSuperbridgeChannel.hasLastValue) {\n          console.warn(\"Superbridge is not initialized\");\n        }\n      });\n    }\n    return currentSuperbridgeChannel.effect((currentBridge) => {\n      return currentBridge.handle(message, handler);\n    });\n  },\n};\n"],"names":[],"mappings":";;AAAO,MAAM,kBAAwB;AAAA,EACnC,YAA4B,MAAc;AAAd,SAAA,OAAA;AAAA,EAAA;AAI9B;AAEO,SAAS,oBACd,MACyB;AAClB,SAAA,IAAI,kBAAwB,IAAI;AACzC;ACPA,MAAM,WAAW,OAAO,UAAU;AAE3B,MAAM,OAAU;AAAA,EAAhB,cAAA;AACG,SAAA,gCAAgB,IAAyB;AACjD,SAAQ,YAAiC;AAAA,EAAA;AAAA,EAEzC,gBAAgB,OAAuB;AACjC,QAAA,KAAK,cAAc,UAAU;AAC/B,YAAM,OAAO,UAAU,WAAW,IAAI,MAAM,KAAK,IAAI;AAAA,IAAA;AAGvD,WAAO,KAAK;AAAA,EAAA;AAAA,EAGd,IAAI,eAAe;AACjB,WAAO,KAAK,cAAc;AAAA,EAAA;AAAA,EAG5B,IAAI,iBAAiB;AACnB,WAAO,KAAK,cAAc,WAAW,SAAY,KAAK;AAAA,EAAA;AAAA,EAGxD,KAAK,OAAU;AACb,SAAK,YAAY;AAEjB,UAAM,YAAY,CAAC,GAAG,KAAK,UAAU,QAAQ;AAE7C,eAAW,YAAY,WAAW;AAC5B,UAAA;AACF,iBAAS,KAAK;AAAA,eACP,OAAO;AACd,gBAAQ,MAAM,KAAK;AAAA,MAAA;AAAA,IACrB;AAAA,EACF;AAAA,EAGF,UAAU,UAAuB;AAC/B,UAAM,KAAK,OAAO;AAEb,SAAA,UAAU,IAAI,IAAI,QAAQ;AAE/B,WAAO,MAAM;AACN,WAAA,UAAU,OAAO,EAAE;AAAA,IAC1B;AAAA,EAAA;AAAA,EAGF,0BAA0B,UAAuB;AAC3C,QAAA,KAAK,cAAc,UAAU;AAC/B,eAAS,KAAK,SAAS;AAAA,IAAA;AAGlB,WAAA,KAAK,UAAU,QAAQ;AAAA,EAAA;AAAA,EAGhC,OAAO,aAAoC;AACrC,QAAA;AAEJ,UAAM,qBAAqB,KAAK,0BAA0B,CAAC,UAAU;AACnE,UAAI,gBAAgB;AACH,uBAAA;AAAA,MAAA;AAGjB,uBAAiB,YAAY,KAAK;AAAA,IAAA,CACnC;AAED,WAAO,MAAM;AACQ,yBAAA;AAEnB,UAAI,gBAAgB;AACH,uBAAA;AAAA,MAAA;AAAA,IAEnB;AAAA,EAAA;AAEJ;AC3DA,MAAM,4BAA4B,IAAI,OAAwB;AAMvD,MAAM,SAA0B;AAAA,EACrC,KAAW,SAAkC,SAAY,OAAgB;AACvE,UAAM,OAAO,0BAA0B;AAAA,MACrC;AAAA,IACF;AAEA,WAAO,KAAK,KAAK,SAAS,SAAS,KAAK;AAAA,EAC1C;AAAA,EACA,OACE,SACA,SACA;AACI,QAAA,CAAC,0BAA0B,cAAc;AACnC,cAAA,UAAU,KAAK,MAAM;AACvB,YAAA,CAAC,0BAA0B,cAAc;AAC3C,kBAAQ,KAAK,gCAAgC;AAAA,QAAA;AAAA,MAC/C,CACD;AAAA,IAAA;AAEI,WAAA,0BAA0B,OAAO,CAAC,kBAAkB;AAClD,aAAA,cAAc,OAAO,SAAS,OAAO;AAAA,IAAA,CAC7C;AAAA,EAAA;AAEL;;;"}