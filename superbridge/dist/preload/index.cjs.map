{"version":3,"file":"index.cjs","sources":["../../__vite-browser-external","../../../node_modules/electron/index.js","../../shared/channel.ts","../../shared/log.ts","../../preload/init.ts"],"sourcesContent":["export default {}","const fs = require('fs');\nconst path = require('path');\n\nconst pathFile = path.join(__dirname, 'path.txt');\n\nfunction getElectronPath () {\n  let executablePath;\n  if (fs.existsSync(pathFile)) {\n    executablePath = fs.readFileSync(pathFile, 'utf-8');\n  }\n  if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {\n    return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || 'electron');\n  }\n  if (executablePath) {\n    return path.join(__dirname, 'dist', executablePath);\n  } else {\n    throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again');\n  }\n}\n\nmodule.exports = getElectronPath();\n","export function getIPCChannelName(name: string) {\n  return `SUPERBRIDGE__${name}`;\n}\n","type Log = (...args: any[]) => void;\n\ninterface Logger {\n  (...args: any[]): void;\n  debug: Log;\n  warn: Log;\n  error: Log;\n  rename: (name: string) => Logger;\n}\n\nexport function createLogger(name: string): Logger {\n  const LOG_COLOR = \"#808080\";\n  const LOG_STYLE = `color: ${LOG_COLOR};`;\n\n  const LABEL = `%cðŸŒ‰ ${name}:%c`;\n\n  const log: Logger = (...args) => {\n    console.info(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.debug = (...args) => {\n    console.debug(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.warn = (...args) => {\n    console.warn(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.error = (...args) => {\n    console.error(LABEL, LOG_STYLE, \"\", ...args);\n  };\n\n  log.rename = (name: string) => {\n    return createLogger(name);\n  };\n\n  return log;\n}\n\nexport const log = createLogger(\"superbridge\");\n","import {\n  IpcRendererEvent,\n  contextBridge,\n  ipcRenderer,\n  webFrame,\n} from \"electron\";\n\nimport { type BridgeHandlerSchema } from \"../main/schema\";\nimport { getIPCChannelName } from \"../shared/channel\";\nimport { createLogger } from \"../shared/log\";\nimport { RawBridgeData } from \"../shared/types\";\n\nconst log = createLogger(\"superbridge/preload\");\n\n/**\n * ! deserialization CANNOT happen here!\n *\n * This is because there is no way to share memory between preload and renderer (tried hard)\n *\n */\n\nif (!process.env.SUPERBRIDGE_SCHEMA) {\n  throw new Error(\n    \"Superbridge is not initialized. Make sure to call initializeSuperbridgeMain() in your main process before creating BrowserWindow.\"\n  );\n}\n\nconst schema = JSON.parse(\n  process.env.SUPERBRIDGE_SCHEMA\n) as BridgeHandlerSchema;\n\nfunction createSuperbridgeInterface() {\n  return {\n    send: async (type: string, payload: RawBridgeData) => {\n      if (!type) throw new Error(\"Type is required\");\n\n      log.debug(`Sending \"${type}\" with payload`, payload);\n\n      return ipcRenderer.invoke(getIPCChannelName(type), payload);\n    },\n    handle: (\n      type: string,\n      handler: (payload: RawBridgeData, event: IpcRendererEvent) => void\n    ) => {\n      if (!type) throw new Error(\"Type is required\");\n\n      function handleMessage(\n        _event: Electron.IpcRendererEvent,\n        payload: RawBridgeData\n      ) {\n        log.debug(`Handling \"${type}\" with payload`, payload);\n        handler(payload, _event);\n      }\n\n      ipcRenderer.on(getIPCChannelName(type), handleMessage);\n\n      return () => {\n        ipcRenderer.off(getIPCChannelName(type), handleMessage);\n      };\n    },\n    get schema() {\n      return schema;\n    },\n    get routingId() {\n      return webFrame.routingId;\n    },\n  };\n}\n\nexport type SuperBridgeInterface = ReturnType<\n  typeof createSuperbridgeInterface\n>;\n\nexport function initializeSuperbridgePreload() {\n  contextBridge.exposeInMainWorld(\n    \"$superbridgeinterface\",\n    createSuperbridgeInterface()\n  );\n}\n\ndeclare global {\n  interface Window {\n    $superbridgeinterface: SuperBridgeInterface;\n  }\n}\n"],"names":["require$$0","log","name","ipcRenderer","webFrame","contextBridge"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAe,wBAAA,CAAA;;;;;;ACAf,MAAM,KAAKA;AACX,MAAM,OAAO;AAEb,MAAM,WAAW,KAAK,KAAK,WAAW,UAAU;AAEhD,SAAS,kBAAmB;AAC1B,MAAI;AACJ,MAAI,GAAG,WAAW,QAAQ,GAAG;AAC3B,qBAAiB,GAAG,aAAa,UAAU,OAAO;AAAA,EACtD;AACE,MAAI,QAAQ,IAAI,6BAA6B;AAC3C,WAAO,KAAK,KAAK,QAAQ,IAAI,6BAA6B,kBAAkB,UAAU;AAAA,EAC1F;AACE,MAAI,gBAAgB;AAClB,WAAO,KAAK,KAAK,WAAW,QAAQ,cAAc;AAAA,EACtD,OAAS;AACL,UAAM,IAAI,MAAM,oGAAoG;AAAA,EACxH;AACA;IAEA,WAAiB,gBAAiB;ACpB3B,SAAS,kBAAkB,MAAc;AAC9C,SAAO,gBAAgB,IAAI;AAC7B;ACQO,SAAS,aAAa,MAAsB;AACjD,QAAM,YAAY;AACZ,QAAA,YAAY,UAAU,SAAS;AAE/B,QAAA,QAAQ,QAAQ,IAAI;AAEpBC,QAAAA,OAAc,IAAI,SAAS;AAC/B,YAAQ,KAAK,OAAO,WAAW,IAAI,GAAG,IAAI;AAAA,EAC5C;AAEAA,OAAI,QAAQ,IAAI,SAAS;AACvB,YAAQ,MAAM,OAAO,WAAW,IAAI,GAAG,IAAI;AAAA,EAC7C;AAEAA,OAAI,OAAO,IAAI,SAAS;AACtB,YAAQ,KAAK,OAAO,WAAW,IAAI,GAAG,IAAI;AAAA,EAC5C;AAEAA,OAAI,QAAQ,IAAI,SAAS;AACvB,YAAQ,MAAM,OAAO,WAAW,IAAI,GAAG,IAAI;AAAA,EAC7C;AAEAA,OAAI,SAAS,CAACC,UAAiB;AAC7B,WAAO,aAAaA,KAAI;AAAA,EAC1B;AAEOD,SAAAA;AACT;AAEmB,aAAa,aAAa;AC3B7C,MAAM,MAAM,aAAa,qBAAqB;AAS9C,IAAI,CAAC,QAAQ,IAAI,oBAAoB;AACnC,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;AAEA,MAAM,SAAS,KAAK;AAAA,EAClB,QAAQ,IAAI;AACd;AAEA,SAAS,6BAA6B;AAC7B,SAAA;AAAA,IACL,MAAM,OAAO,MAAc,YAA2B;AACpD,UAAI,CAAC,KAAY,OAAA,IAAI,MAAM,kBAAkB;AAE7C,UAAI,MAAM,YAAY,IAAI,kBAAkB,OAAO;AAEnD,aAAOE,SAAY,YAAA,OAAO,kBAAkB,IAAI,GAAG,OAAO;AAAA,IAC5D;AAAA,IACA,QAAQ,CACN,MACA,YACG;AACH,UAAI,CAAC,KAAY,OAAA,IAAI,MAAM,kBAAkB;AAEpC,eAAA,cACP,QACA,SACA;AACA,YAAI,MAAM,aAAa,IAAI,kBAAkB,OAAO;AACpD,gBAAQ,SAAS,MAAM;AAAA,MAAA;AAGzBA,eAAAA,YAAY,GAAG,kBAAkB,IAAI,GAAG,aAAa;AAErD,aAAO,MAAM;AACXA,iBAAAA,YAAY,IAAI,kBAAkB,IAAI,GAAG,aAAa;AAAA,MACxD;AAAA,IACF;AAAA,IACA,IAAI,SAAS;AACJ,aAAA;AAAA,IACT;AAAA,IACA,IAAI,YAAY;AACd,aAAOC,SAAS,SAAA;AAAA,IAAA;AAAA,EAEpB;AACF;AAMO,SAAS,+BAA+B;AAC/BC,WAAAA,cAAA;AAAA,IACZ;AAAA,IACA,2BAA2B;AAAA,EAC7B;AACF;;","x_google_ignoreList":[1]}